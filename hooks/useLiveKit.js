import React, { useEffect, useRef, useState } from 'react';
import { Room, createLocalVideoTrack, createLocalAudioTrack, RoomEvent, setLogLevel } from 'livekit-client';
import { IVS_STREAM_DNS, LIVEKIT_STREAM_DNS } from '../lib/config';
import Axios from 'axios';

/**
 * @description Hooks to get agora functions
 * @author Pranjal k
 * @date 22/04/2021
 * @param client
 * @return {*} {
        localAudioTrack,
        localVideoTrack,
        joinState,
        leave,
        Join,
        remoteUsers,
      } 
 */

const useLiveKit = () => {
    const [localVideoTrack, setLocalVideoTrack] = useState(null);
    const [localAudioTrack, setLocalAudioTrack] = useState(null);
    const [joinState, setJoinState] = useState(false);
    const [remoteUsers, setRemoteUsers] = useState([]);
    const [wrapServers] = useState({ primaryServer: IVS_STREAM_DNS, liveKitServer: LIVEKIT_STREAM_DNS });
    const [room, setRoom] = useState(null)
    const videoBoxRef = useRef(null)
    // console.log(props, "Asijddisjijij")
    console.log(remoteUsers, "asijdajdsijij")
    const handleTrackPublished = (track) => {
        console.log(remoteUsers, track, "asdijaijijij")
        if (track.kind === 'video') {
            setRemoteUsers((remoteUsers) => [...remoteUsers, track]);
            // track.attach(videoBoxRef.current);
        }
    };
    const handleTrackUnpublished = (track) => {
        if (track.kind === 'video') {
            setRemoteUsers((remoteUsers) =>
                remoteUsers.filter((user) => user.sid !== track.sid)
            );
        }
    };



    useEffect(() => {
        // if (room) {
        //     room?.on(RoomEvent.TrackPublished, handleTrackPublished);
        //     room?.on(RoomEvent.TrackUnpublished, handleTrackUnpublished);
        // }

        // return () => {
        //     room?.off(RoomEvent.TrackPublished, handleTrackPublished);
        //     room?.off(RoomEvent.TrackUnpublished, handleTrackUnpublished);
        // };
        console.log(videoBoxRef, "sjadookok")
    }, [videoBoxRef]);

    const removeLocalVideoTrack = async (room) => {
        try {
            if (localVideoTrack) {
                await room.localParticipant.unpublishTrack(localVideoTrack);
                localVideoTrack.stop();
                setLocalVideoTrack(null);
            }
        } catch (error) {
            console.error(error);
        }
    };

    const joinLocalVideoTrack = async (room) => {
        try {
            if (localVideoTrack) {
                await room.localParticipant.publishTrack(localVideoTrack);
            } else {
                const videoTrack = await createLocalVideoTrack({
                    facingMode: "user",
                    resolution: "hd720"
                });
                setLocalVideoTrack(videoTrack);
                console.log(videoTrack, "sadaijdijjiijij")
                await room.localParticipant.publishTrack(videoTrack);
            }
        } catch (error) {
            console.error(error);
        }
    };

    const removeLocalAudioTrack = async () => {
        try {
            if (localAudioTrack) {
                await room.unpublishTrack(localAudioTrack);
                localAudioTrack.stop();
                setLocalAudioTrack(null);
            }
        } catch (error) {
            console.error(error);
        }
    };

    const joinLocalAudioTrack = async () => {
        try {
            if (localAudioTrack) {
                await room.publishTrack(localAudioTrack);
            } else {
                const audioTrack = await createLocalAudioTrack();
                setLocalAudioTrack(audioTrack);
                await room.publishTrack(audioTrack);
            }
        } catch (error) {
            console.error(error);
        }
    };


    /**
   * @description call this method to Join call with creds
   * @author Pranjal k
   * @date 22/04/2021
   * @param appid:String - agora app id
   * @param channel:String - Channel name
   * @param token?:String - token for role management
   * @param uid?:String- Integer - unique userid (default generated by agora)
   * @param options?:Object- other options)
   */


    const handleTrackSubscribed = (track) => {
        console.log(track, "saijdjijiij")
        if (track.kind === 'video') {
            setRemoteUsers((remoteUsers) => [...remoteUsers, track]);
            // track.attach(videoBoxRef.current);
        }
        // if (track.kind === "video") {
        //     track.attach(remoteUsersRef.current);
        // }
    }

    const join = async (userName, roomName, callBacks) => {
        return
        const room = new Room({
            logLevel: 'debug',
            adaptiveStream: true,
        });

        const instance = Axios.create({
            baseURL: 'http://localhost:7070', // Replace with your desired base URL
        });

        let serverPri = wrapServers.liveKitServer
        let wsUrl = `wss://${serverPri}`;
        try {
            let roomName = "AppscripVideoCall"
            const { data } = await instance.get(`/getToken?username=${userName}&roomname=${roomName}`)
            console.log(data, "livekitToken")


            room?.on(RoomEvent.TrackPublished, handleTrackPublished);
            room?.on(RoomEvent.TrackUnpublished, handleTrackUnpublished);
            room?.on(RoomEvent.LocalTrackPublished, handleLocalTrackPublished);
            room?.on(RoomEvent.TrackSubscribed, handleTrackSubscribed);

            await room.connect(wsUrl, data || "");
            setLogLevel('debug');
            setRoom(room);

            const localVideoTrack = await createLocalVideoTrack({
                facingMode: "user",
                resolution: "hd720"
            });
            console.log(videoBoxRef, "asijdijijij")
            localVideoTrack.attach(videoBoxRef.current)
            console.log(videoBoxRef, "asijdijijij", 1)
            const localAudioTrack = await createLocalAudioTrack();
            const isPublisher = true;
            await room.localParticipant.publishTrack(localVideoTrack, { isPublisher });
            await room.localParticipant.publishTrack(localAudioTrack, { isPublisher });
            // joinLocalVideoTrack(room)
            // Turns camera track on
            room.localParticipant.setCameraEnabled(true)
            if (callBacks.videoSuccess) {
                // callBacks.videoSuccess();
            }

            // Turns microphone track on
            room.localParticipant.setMicrophoneEnabled(true)
            if (callBacks.audioSuccess) {
                // callBacks.audioSuccess();
            }

            const videoTracks = Array.from(room.localParticipant.videoTracks.values());
            // const audioTracks = Array.from(room.localParticipant.audioTracks.values());
            videoTracks.forEach((track) => {
                console.log(track, "asdijaijijij")
                // track.attach(videoBoxRef.current);
            });

            // demo

            // const localParticipant = room.localParticipant;

            // Subscribe to the local participant's tracks
            // localParticipant.onTrackPublished((trackPublication) => {
            //     const track = trackPublication.track;

            //     // Check the track's kind (video or audio) and set the state accordingly
            //     if (track.kind === 'video') {
            //         setLocalVideoTrack(track);
            //     } else if (track.kind === 'audio') {
            //         setLocalAudioTrack(track);
            //     }
            // });

            // Publish the local tracks
            // const videoTrack = await LocalVideoTrack.create();
            // const audioTrack = await LocalAudioTrack.create();
            // await localParticipant.publishTrack(videoTrack);
            // await localParticipant.publishTrack(audioTrack);
        }
        catch (error) {
            console.error(error);
        }

    };

    const handleLocalTrackPublished = (track) => {
        console.log("Aijdsadiaijdsi", "outsideuseEffect", track)
        if (track.kind === 'video') {
            // Attach the track to the video element
            // const mediaStream = new MediaStream([track.mediaStreamTrack]);

            // Attach the MediaStream to the video element
            // videoBoxRef.current.srcObject = mediaStream;
            // track.attach(videoBoxRef.current);
        }
    }


    // useEffect(() => {
    //     // Listen for the localTrackPublished event
    //     const handleLocalTrackPublished = (track) => {
    //         console.log("Aijdsadiaijdsi", "useEffect", videoBoxRef)
    //         if (track.kind === 'video') {
    //             // Attach the track to the video element
    //             track.attach(videoBoxRef.current);
    //         }
    //     };

    //     room?.on(RoomEvent.LocalTrackPublished, handleLocalTrackPublished);

    //     // Clean up the event listener when the component unmounts
    //     return () => {
    //         room?.off(RoomEvent.LocalTrackPublished, handleLocalTrackPublished);
    //     };
    // }, []);

    const leave = async () => {
        return
        try {
            if (localAudioTrack) {
                localAudioTrack.stop();
                localAudioTrack.close();
            }

            if (localVideoTrack) {
                localVideoTrack.stop();
                localVideoTrack.close();
            }

            await room.localParticipant.unpublishTrack(localAudioTrack);
            await room.localParticipant.unpublishTrack(localVideoTrack);

            setRemoteUsers([]);
            setJoinState(false);
        } catch (error) {
            console.error(error);
        }
    };

    return {
        localAudioTrack,
        localVideoTrack,
        joinState,
        remoteUsers,
        client: room,
        removeLocalVideoTrack,
        removeLocalAudioTrack,
        joinLocalVideoTrack,
        joinLocalAudioTrack,
        join,
        leave,
        videoBoxRef
    };
};

export default useLiveKit;
